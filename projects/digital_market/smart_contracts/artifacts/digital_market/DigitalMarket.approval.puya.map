{
  "version": 3,
  "sources": [
    "../../digital_market/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;AAAA;AAKK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AALL;;;AAAA;AAAA;;AAAA;;;AAAA;AAKK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AAXL;;;AAAA;AAWK;;;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBK;;;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;;AAAA;AAlCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAkCK;;;AAAA;AAAA;AAaA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA/CL;AAAA;AAKA;;;AAEQ;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAGR;;;AAEe;;AAAc;;AAAd;AAAP;AACA;AAAA;;AAAA;;AAGR;;;AAEe;;AAAc;;AAAd;AAAP;AACW;;AAAqD;AAAA;AAAA;AAAA;AAArD;;AAAA;;AAAJ;AAAP;AAEO;;AAAA;;AAAmB;;AAAnB;AAAP;AAEO;;AAAA;;AAAiB;;AAAqB;;AAArB;AAAjB;AAAP;AAEA;AACgB;AAAA;AAAA;AAAA;AACI;;AACF;;;;;;;AAHlB;;;AAAA;;;AAAA;;AAQR;;;AAEe;;AAAA;;AAAmB;;AAAnB;AAAP;AACO;;AAAA;;AAAqB;;AAArB;AAAP;AACO;;AAAA;;AAAmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAnB;AAAP;AAEA;AACgB;AAAA;AAAA;AAAA;AACI;;;;;;;;;;AAFpB;;;AAAA;;;AAAA;;AAOR;;;AAGe;;AAAc;;AAAd;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;;AAKA;;;AAFF;;;;;;;AALjB;;;AAQQ;;;AARR;AAYA;AACa;;AAGU;;;AAFZ;;;;;AAFX;;;AAKQ;;;AALR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.approval_program",
      "params": {},
      "block": "smart_contracts.digital_market.contract.DigitalMarket.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000"
    },
    "8": {
      "op": "bytecblock \"assetid\" \"unitaryprice\""
    },
    "31": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "34": {
      "op": "return",
      "stack_out": []
    },
    "35": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "38": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "op": "bz __puya_arc4_router___after_if_else@10",
      "stack_out": []
    },
    "43": {
      "op": "pushbytess 0x878cbb3d 0xcc760037 0x1574535a 0x790bf59f 0x33b3499e // method \"create_application(asset,uint64)void\", method \"set_price(uint64)void\", method \"opt_in_to_asset(pay)void\", method \"buy(pay,uint64)void\", method \"delete_application()void\""
    },
    "70": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy(pay,uint64)void)",
        "Method(create_application(asset,uint64)void)",
        "Method(delete_application()void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(set_price(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(asset,uint64)void)",
        "Method(set_price(uint64)void)",
        "Method(opt_in_to_asset(pay)void)",
        "Method(buy(pay,uint64)void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "73": {
      "op": "match __puya_arc4_router___create_application_route@2 __puya_arc4_router___set_price_route@3 __puya_arc4_router___opt_in_to_asset_route@4 __puya_arc4_router___buy_route@5 __puya_arc4_router___delete_application_route@6",
      "stack_out": []
    },
    "85": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "86": {
      "retsub": true,
      "op": "retsub"
    },
    "87": {
      "block": "__puya_arc4_router___create_application_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "89": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "90": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "94": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "95": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "98": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "99": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "104": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "105": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "109": {
      "retsub": true,
      "op": "retsub"
    },
    "110": {
      "block": "__puya_arc4_router___set_price_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "117": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "120": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "121": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.set_price",
      "op": "callsub set_price",
      "stack_out": []
    },
    "124": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "125": {
      "retsub": true,
      "op": "retsub"
    },
    "126": {
      "block": "__puya_arc4_router___opt_in_to_asset_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "1"
      ]
    },
    "136": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "137": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "138": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "140": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "141": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "142": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "143": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.opt_in_to_asset",
      "op": "callsub opt_in_to_asset",
      "stack_out": []
    },
    "146": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "147": {
      "retsub": true,
      "op": "retsub"
    },
    "148": {
      "block": "__puya_arc4_router___buy_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "151": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "155": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "157": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "1"
      ]
    },
    "158": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "159": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "160": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "162": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "164": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "165": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%28#0"
      ]
    },
    "168": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%29#0"
      ]
    },
    "169": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "173": {
      "retsub": true,
      "op": "retsub"
    },
    "174": {
      "block": "__puya_arc4_router___delete_application_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "176": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "DeleteApplication"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "callsub": "smart_contracts.digital_market.contract.DigitalMarket.delete_application",
      "op": "callsub delete_application"
    },
    "186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "187": {
      "retsub": true,
      "op": "retsub"
    },
    "188": {
      "block": "__puya_arc4_router___after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "189": {
      "retsub": true,
      "op": "retsub"
    },
    "190": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.create_application",
      "params": {
        "asset_id#0": "uint64",
        "unitary_price#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "193": {
      "op": "bytec_0 // \"assetid\"",
      "defined_out": [
        "\"assetid\""
      ],
      "stack_out": [
        "\"assetid\""
      ]
    },
    "194": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"assetid\"",
        "asset_id#0 (copy)"
      ]
    },
    "196": {
      "op": "app_global_put",
      "stack_out": []
    },
    "197": {
      "op": "bytec_1 // \"unitaryprice\"",
      "defined_out": [
        "\"unitaryprice\""
      ],
      "stack_out": [
        "\"unitaryprice\""
      ]
    },
    "198": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"unitaryprice\"",
        "unitary_price#0 (copy)"
      ],
      "stack_out": [
        "\"unitaryprice\"",
        "unitary_price#0 (copy)"
      ]
    },
    "200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "201": {
      "retsub": true,
      "op": "retsub"
    },
    "202": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.set_price",
      "params": {
        "unitary_price#0": "uint64"
      },
      "block": "set_price",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "205": {
      "op": "txn Sender"
    },
    "207": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "210": {
      "op": "assert",
      "stack_out": []
    },
    "211": {
      "op": "bytec_1 // \"unitaryprice\"",
      "defined_out": [
        "\"unitaryprice\""
      ],
      "stack_out": [
        "\"unitaryprice\""
      ]
    },
    "212": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"unitaryprice\"",
        "unitary_price#0 (copy)"
      ],
      "stack_out": [
        "\"unitaryprice\"",
        "unitary_price#0 (copy)"
      ]
    },
    "214": {
      "op": "app_global_put",
      "stack_out": []
    },
    "215": {
      "retsub": true,
      "op": "retsub"
    },
    "216": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.opt_in_to_asset",
      "params": {
        "mbrpay#0": "uint64"
      },
      "block": "opt_in_to_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "219": {
      "op": "txn Sender"
    },
    "221": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "224": {
      "op": "assert",
      "stack_out": []
    },
    "225": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "227": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "228": {
      "op": "bytec_0 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"assetid\""
      ]
    },
    "229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "230": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "231": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "233": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "236": {
      "op": "assert",
      "stack_out": []
    },
    "237": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrpay#0 (copy)"
      ],
      "stack_out": [
        "mbrpay#0 (copy)"
      ]
    },
    "239": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "241": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "243": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "244": {
      "op": "assert",
      "stack_out": []
    },
    "245": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrpay#0 (copy)"
      ]
    },
    "247": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "249": {
      "op": "global MinBalance"
    },
    "251": {
      "op": "global AssetOptInMinBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "253": {
      "op": "+",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "255": {
      "op": "assert",
      "stack_out": []
    },
    "256": {
      "op": "itxn_begin"
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "258": {
      "op": "bytec_0 // \"assetid\"",
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "260": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "261": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "264": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "266": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "268": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "270": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "271": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "274": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "276": {
      "op": "itxn_submit"
    },
    "277": {
      "retsub": true,
      "op": "retsub"
    },
    "278": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.buy",
      "params": {
        "buyerTxn#0": "uint64",
        "quantity#0": "uint64"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "281": {
      "op": "frame_dig -2",
      "defined_out": [
        "buyerTxn#0 (copy)"
      ],
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "283": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "288": {
      "op": "assert",
      "stack_out": []
    },
    "289": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "291": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "293": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "295": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "296": {
      "op": "assert",
      "stack_out": []
    },
    "297": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyerTxn#0 (copy)"
      ]
    },
    "299": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "302": {
      "op": "bytec_1 // \"unitaryprice\"",
      "defined_out": [
        "\"unitaryprice\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"unitaryprice\""
      ]
    },
    "303": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "304": {
      "error": "check self.unitaryprice exists",
      "op": "assert // check self.unitaryprice exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "305": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "quantity#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "quantity#0 (copy)"
      ]
    },
    "307": {
      "op": "*",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "308": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "309": {
      "op": "assert",
      "stack_out": []
    },
    "310": {
      "op": "itxn_begin"
    },
    "311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "312": {
      "op": "bytec_0 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "314": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "315": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "317": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "quantity#0 (copy)"
      ]
    },
    "319": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "321": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "323": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "325": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "326": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "329": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "331": {
      "op": "itxn_submit"
    },
    "332": {
      "retsub": true,
      "op": "retsub"
    },
    "333": {
      "subroutine": "smart_contracts.digital_market.contract.DigitalMarket.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "336": {
      "op": "txn Sender"
    },
    "338": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "340": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "341": {
      "op": "assert",
      "stack_out": []
    },
    "342": {
      "op": "itxn_begin"
    },
    "343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "344": {
      "op": "bytec_0 // \"assetid\"",
      "defined_out": [
        "\"assetid\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetid\""
      ]
    },
    "345": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "346": {
      "error": "check self.assetid exists",
      "op": "assert // check self.assetid exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "347": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "350": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "352": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "353": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "355": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "357": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "359": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "360": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "362": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "363": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "365": {
      "op": "itxn_submit"
    },
    "366": {
      "op": "itxn_begin"
    },
    "367": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "369": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "370": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "372": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "373": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "375": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "377": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "378": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "380": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "381": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "383": {
      "op": "itxn_submit"
    },
    "384": {
      "retsub": true,
      "op": "retsub"
    }
  }
}